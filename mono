#!/bin/bash

set -e

# utilities

die () {
	echo -e "$*" >&2
	exit 1
}

getImport() {
	set $(go list -f '{{.Dir}} {{.Root}}' $1)
	echo ${1#$2/src/}
}

# commands

build() {
	go build -o $1/main ./$1
}

dependencies() {
	go list -f '{{join .Imports "\n"}}' ./$1
}

dependents() {
	packages=$(for file in $*; do go list -f '{{.ImportPath}}' ./$file; done)
	for dir in $(ls -d ./*/|grep -v vendor); do
		if [[ $(comm -12 <(go list -f '{{join .Deps "\n"}}' ./$dir/...) <(printf '%s\n' "${packages[@]}")) ]]; then
			echo $dir
		fi
	done
}

doTest() {
	go test ./$1
}

testBranch() {
	files=$(git diff --name-only --diff-filter=AMRC $(git merge-base master $1)..$1)
	changed=$(for file in $files; do path=$(getImport $file); echo ${path#*/}; done)
	git checkout $1
	trap 'git checkout -' EXIT
	for package in $(dependents $changed); do
		doTest $package || die
	done
}

# command switch

case $1 in
dependencies)
	[[ -n $2 ]] || die "Usage: $0 dependencies <project>"
	dependencies $2
	;;
dependents)
	[[ -n $2 ]] || die "Usage: $0 dependents <project>"
	dependents "${@:2}"
	;;
build)
	[[ -n $2 ]] || die "Usage: $0 build <project>"
	build $2
	;;
test)
	[[ -n $2 ]] || die "Usage: $0 test <project>"
	doTest $2
	;;
test-branch)
	[[ -n $2 ]] || die "Usage: $0 test-branch <branch>"
	testBranch $2
	;;
*)
	die "No such command: $1\nUsage: $0 <command> <opts>"
	;;
esac
